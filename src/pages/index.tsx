import { useRef, useState } from "react";
import type { NextPage } from "next";
import Head from "next/head";

const Home: NextPage = () => {
  const [isMovementLock, setMovementLock] = useState(true);
  const [isPlacementLock, setPlacementLock] = useState(false);
  const [isPaletteVisible, setPaletteVisible] = useState(false);
  const [isCooldown, setCooldown] = useState(false);

  const [zoom, setZoom] = useState(5);
  const [cursorX, setCursorX] = useState("0px");
  const [cursorY, setCursorY] = useState("0px");
  const [paletteX, setPaletteX] = useState("0px");
  const [paletteY, setPaletteY] = useState("0px");

  const scaledCanvasRef = useRef<HTMLCanvasElement>(null);

  const scaled_canvas = scaledCanvasRef.current;

  const numberClamp = (num: number, min: number, max: number) => {
    return Math.min(Math.max(num, min), max);
  };

  window.addEventListener("mousedown", (e) => {
    if (e.button == 1 || e.button == 2) {
      e.preventDefault();
    }
    if (e.button == 0 || e.button == 1) {
      setMovementLock(true);
    }
  });
  window.addEventListener("mouseup", () => {
    setMovementLock(false);
  });
  window.addEventListener("contextmenu", (e) => e.preventDefault());
  window.addEventListener("wheel", (e) => {
    setZoom(numberClamp(zoom + (e.deltaY < 0 ? 0.2 : -0.2), 0.3, 8));
  });
  window.addEventListener("mousemove", (e) => {
    requestAnimationFrame(() => {
      setCursorX(`${Math.floor(e.clientX)}px`);
      setCursorY(`${Math.floor(e.clientY)}px`);
    });
  });

  if (scaled_canvas) {
    scaled_canvas.addEventListener("mousedown", (e) => {
      if (e.button == 0) {
        // Prevent placement if palette was open
        setPlacementLock(!isPaletteVisible);
        setPaletteVisible(false);
      } else if (e.button == 1) {
        setPaletteVisible(false);
      } else if (e.button == 2) {
        setPaletteVisible(!isPaletteVisible);
        setPaletteX(cursorX);
        setPaletteY(cursorY);
      }
    });
  }
  return (
    <>
      <Head>
        <title>T3 Place</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container flex flex-col items-center justify-center min-h-screen p-4 mx-auto">
        <canvas ref={scaledCanvasRef} />
      </main>
    </>
  );
};

export default Home;
